$paragraph-width: map_get($container-max-widths, md) - $grid-gutter-width;

body {
    @extend body;
    overflow-y: scroll;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6 {
    color: darken($body-color, 10%);
}

h1, .h1,
h2, .h2,
h3, .h3,
h4, .h4,
h5, .h5,
h6, .h6,
blockquote,
ul, ol, // this can make problems with .nav's but should be fine. They shouldn't be wider than this to begin with
p {
    max-width: $paragraph-width;
}

header, footer {
    a {
        color: inherit;
    }
}

@supports (hyphens: auto) {
    //noinspection CssUnknownProperty, CssInvalidPropertyValue
    [lang^=de] {
        p, li {
            text-align: justify;
            hyphens: auto;
            // properties not understood by autoprefixer
            -webkit-hyphenate-limit-before: 3;
            -webkit-hyphenate-limit-after: 4;
            hyphenate-limit-chars: auto 3 4;
        }
    }

    a, b, abbr, strong, blockquote, .nav > li {
        hyphens: manual;
    }
}

blockquote {
    $horizontal-padding: 2rem;

    position: relative;
    display: table;
    padding: 0 2rem 1rem;
    font-size: 95%;

    [lang^=de] & p {
        text-align: left;
        hyphens: manual;
    }

    p:last-child {
        margin-bottom: 0;
    }

    &:before,
    &:after {
        position: absolute;
        font-family: Georgia, serif;
        font-size: 3rem;
    }

    &:before {
        content: "„";
        bottom: 0;
        left: 0;
    }

    &:after {
        content: "“";
        top: -1.1rem;
        right: 0;
    }

    cite {
        position: absolute;
        bottom: -.2rem;
        display: block;
        font-size: $font-size-xs;
        color: $text-muted;
        @include text-truncate;

        a {
            color: inherit;
        }
    }
}

code {
    padding: .2rem .2rem;
    font-size: .9em;
    color: $code-color;
    background-color: $code-bg;
    hyphens: none;
    word-break: keep-all;
}

.highlight {
    $horizontal-padding: $grid-gutter-width / 4;

    > pre {
        display: block;
        padding: ($grid-gutter-width / 6) $horizontal-padding;
        line-height: 1.3;
        font-size: .9em;
        color: $pre-color;

        // Account for some code outputs that place code tags in pre tags
        code {
            padding: 0;
            font-size: inherit;
            color: inherit;
            background-color: transparent;
        }
    }

    margin: (-$grid-gutter-width / 6) 0;

    position: relative;
    @include gradient-horizontal($code-bg, $body-bg);

    &:before, &:after {
        content: "";
        display: block;
        position: absolute;
        z-index: 1;
        top: 0;
        height: 100%;
        pointer-events: none;
    }

    @mixin fade-size($fade-size) {
        &:before {
            left: 0;
            width: $fade-size;
            @include gradient-horizontal($code-bg, fade-out(mix($body-bg, $code-bg, $fade-size), 1));
        }

        &:after {
            right: 0;
            width: $fade-size;
            @include gradient-horizontal(fade-out(mix($body-bg, $code-bg, 100% - $fade-size), 1), $body-bg);
        }
    }

    @each $breakpoint, $max-size in $container-max-widths {
        @include media-breakpoint-only($breakpoint) {
            @include fade-size(percentage($horizontal-padding / $max-size));
        }
    }

    @include media-breakpoint-down(xs) {
        $horizontal-padding: $grid-gutter-width / 2;
        @include fade-size(percentage($horizontal-padding / map_get($container-max-widths, sm)));
        margin-left: -$horizontal-padding;
        margin-right: -$horizontal-padding;
        > pre {
            padding-left: $horizontal-padding;
            padding-right: $horizontal-padding;
        }
    }
}